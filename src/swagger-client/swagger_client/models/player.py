# coding: utf-8

"""
    SNC API

    This is an API server for the data scraped from the SNC website.

    OpenAPI spec version: 1.0.0
    Contact: not-an-email@example.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Player(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'number': 'int',
        'name': 'str',
        'team': 'Team',
        'position': 'str'
    }

    attribute_map = {
        'id': 'id',
        'number': 'number',
        'name': 'name',
        'team': 'team',
        'position': 'position'
    }

    def __init__(self, id=None, number=None, name=None, team=None, position=None):
        """
        Player - a model defined in Swagger
        """

        self._id = None
        self._number = None
        self._name = None
        self._team = None
        self._position = None
        self.discriminator = None

        if id is not None:
          self.id = id
        self.number = number
        self.name = name
        self.team = team
        if position is not None:
          self.position = position

    @property
    def id(self):
        """
        Gets the id of this Player.

        :return: The id of this Player.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Player.

        :param id: The id of this Player.
        :type: int
        """

        self._id = id

    @property
    def number(self):
        """
        Gets the number of this Player.
        The player's jersey number

        :return: The number of this Player.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this Player.
        The player's jersey number

        :param number: The number of this Player.
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def name(self):
        """
        Gets the name of this Player.

        :return: The name of this Player.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Player.

        :param name: The name of this Player.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def team(self):
        """
        Gets the team of this Player.

        :return: The team of this Player.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this Player.

        :param team: The team of this Player.
        :type: Team
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def position(self):
        """
        Gets the position of this Player.

        :return: The position of this Player.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Player.

        :param position: The position of this Player.
        :type: str
        """
        allowed_values = ["F", "D"]
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
