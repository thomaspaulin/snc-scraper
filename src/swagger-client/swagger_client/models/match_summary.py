# coding: utf-8

"""
    SNC API

    This is an API server for the data scraped from the SNC website.

    OpenAPI spec version: 1.0.0
    Contact: not-an-email@example.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MatchSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'date',
        'away': 'Team',
        'home': 'Team',
        'away_score': 'int',
        'home_score': 'int',
        'rink': 'str'
    }

    attribute_map = {
        'start': 'start',
        'away': 'away',
        'home': 'home',
        'away_score': 'awayScore',
        'home_score': 'homeScore',
        'rink': 'rink'
    }

    def __init__(self, start=None, away=None, home=None, away_score=None, home_score=None, rink=None):
        """
        MatchSummary - a model defined in Swagger
        """

        self._start = None
        self._away = None
        self._home = None
        self._away_score = None
        self._home_score = None
        self._rink = None
        self.discriminator = None

        self.start = start
        self.away = away
        self.home = home
        if away_score is not None:
          self.away_score = away_score
        if home_score is not None:
          self.home_score = home_score
        self.rink = rink

    @property
    def start(self):
        """
        Gets the start of this MatchSummary.
        Date time at which the match starts, in UTC

        :return: The start of this MatchSummary.
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this MatchSummary.
        Date time at which the match starts, in UTC

        :param start: The start of this MatchSummary.
        :type: date
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def away(self):
        """
        Gets the away of this MatchSummary.

        :return: The away of this MatchSummary.
        :rtype: Team
        """
        return self._away

    @away.setter
    def away(self, away):
        """
        Sets the away of this MatchSummary.

        :param away: The away of this MatchSummary.
        :type: Team
        """
        if away is None:
            raise ValueError("Invalid value for `away`, must not be `None`")

        self._away = away

    @property
    def home(self):
        """
        Gets the home of this MatchSummary.

        :return: The home of this MatchSummary.
        :rtype: Team
        """
        return self._home

    @home.setter
    def home(self, home):
        """
        Sets the home of this MatchSummary.

        :param home: The home of this MatchSummary.
        :type: Team
        """
        if home is None:
            raise ValueError("Invalid value for `home`, must not be `None`")

        self._home = home

    @property
    def away_score(self):
        """
        Gets the away_score of this MatchSummary.

        :return: The away_score of this MatchSummary.
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """
        Sets the away_score of this MatchSummary.

        :param away_score: The away_score of this MatchSummary.
        :type: int
        """

        self._away_score = away_score

    @property
    def home_score(self):
        """
        Gets the home_score of this MatchSummary.

        :return: The home_score of this MatchSummary.
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """
        Sets the home_score of this MatchSummary.

        :param home_score: The home_score of this MatchSummary.
        :type: int
        """

        self._home_score = home_score

    @property
    def rink(self):
        """
        Gets the rink of this MatchSummary.

        :return: The rink of this MatchSummary.
        :rtype: str
        """
        return self._rink

    @rink.setter
    def rink(self, rink):
        """
        Sets the rink of this MatchSummary.

        :param rink: The rink of this MatchSummary.
        :type: str
        """
        if rink is None:
            raise ValueError("Invalid value for `rink`, must not be `None`")

        self._rink = rink

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MatchSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
